% Гамма распределение a=2 b=3

% 1
% В соответствии с номером варианта, используя генератор псевдослучайных
% чисел, генерировать выборку из заданного непрерывного распределения
% объемом N=10000 с заданными для вашего распределения параметрами

N = 10000;  % Объем выборки
v = gamrnd(2, 3, 1, N);  % Создание вектора длинной N с числами из гамма распределения где a = 2 и b = 3

% 2
% 2.1 С помощью стандартных функций, содержащихся в математическом пакете,
% получить минимальное и максимальное значения выборки, выборочное среднее,
% выборочную дисперсию (исправленную и неисправленную), выборочное
% среднеквадратичное отклонение для исправленной дисперсии

vMin = min(v);  % Получение минимального значения выборки
vMax = max(v);  % Получение максимального значения выборки
vMean = mean(v);  % Получение выборочного среднего
vVar = var(v);  % Получение неисправленной дисперсии выборки
vCorVar = (N / (N - 1)) * vVar;  % Получение исправленной дисперсии выборки
vStd = sqrt(vCorVar);  % Получение среднеквадратичного отклонения исправленной дисперсии

% 2.2 Для заданного теоретического распределения, из которого генерируете
% выборку, письменно в тетради провести расчет математического ожидания и
% дисперсии. Сравнить полученные теоретические результаты с выборочным
% средним и исправленной выборочной дисперсией. Сделать выводы

disp(['Среднее значение: ' num2str(vMean)]);  % Вывод среднего значение
disp(['Относительная погрешность: ' num2str(abs(vMean - 6)/6) '%'])
disp(['Исправленная дисперсия: ' num2str(vCorVar)]);  % Вывод исправленной дисперсии
disp(['Относительная погрешность: ' num2str(abs(vCorVar - 18)/18) '%'])

% Теоретическое вычисление среднего значение дало: 6 (a * b)
% Теоретическое вычисление дисперсии генеральной выборки дало: 18 (a * b^2)

% Вывод: Программа считает значение среднего и дисперсии относительно
% точно и после теста не выдала значение с погрешностью больше 0.5 для
% дисперсии или 0.01 для среднего. 

% 2.3 Проанализировать поведение выборочного среднего и исправленной
% выборочной дисперсии в зависимости от объема выборки. Для этого получить
% следующие графические зависимости:
% Генерировать 1000 выборочных реализаций объемом N = 10. Для каждой из них
% посчитать выборочное среднее и исправленную выборочную дисперсию.
% Построить график зависимости выборочного среднего от номера реализации и
% график зависимости исправленной выборочной дисперсии от номера
% реализации. На первый из них также нанести значение математического
% ожидания, а на второй значение дисперсии, посчитанные по теоретическим
% формулам.

% Далее проделать все то же самое для N = 50, 100, 10000
% Проанализировать полученные графические зависимости и сделать выводы.

figure;  % Создание экрана
nums = [10, 50, 100, 10000];  % Варианты N  

for i = 0:3  % Делаем 4 слоя графиков через for
    en = gamrnd(2, 3, nums(i + 1), 1000);  % Генерируем матрицу из выборок
    evMean = mean(en);  % считаем среднее для всех выборок
    evCorVar = (nums(i + 1) / (nums(i + 1) - 1)) * var(en);  % считаем исправленную дисперсию для всех выборок
    
    subplot(4, 2, i * 2 + 1);  % Выбираем субплоскость
    plot(evMean);  % Создаем ломаную из точек. (x автоматически от 1 до 1000)
    grid on;  % Включаем сетку для наглядности
    title(['Выборочные средние для реализаций с N=' num2str(nums(i + 1))]);  % Подписываем график
    xlabel("Номер реализации");  % Подписываем ось x 
    ylabel("Выборочное среднее");    % Подписываем ось y
    line([0 1000], [6 6], "color", "red");  % Рисуем линию для наглядности разности точек на плоскости с ожидаемым значением
    
    subplot(4, 2, i * 2 + 2);  % Далее аналогично
    plot(evCorVar);
    grid on;
    title(['Выборочные исправленные дисперсии для реализаций с N=' num2str(nums(i + 1))]);
    xlabel("Номер реализации");
    ylabel("Выб. испр. дисперсия");
    line([0 1000], [18 18], "color", "red");
end

clear en;  % Очищаем память
clear evMean;
clear evCorvar;

% Вывод: Чем больше значений в выборке, тем меньше расстояние до среднего
% значения и исправленной дисперсии вычисленных на генеральной выборке

% 2.4 Найти среднее от выборочного среднего и среднее от исправленной
% выборочной дисперсии по 1000 штук выборочных реализаций объемом 10000.
% Сравнить полученные значения с математическим ожиданием и дисперсией того
% распределения, из которого выборка генерировалась.

ev = gamrnd(2, 3, 10000, 1000);  % Создаем матрицу из выборок
eMean = mean(mean(ev));  % Считаем среднее значение средних значений
eVar = mean(10000 / 9999 * var(ev));  % Считаем среднее значение исправленных дисперсий
disp(['Среднее значение: ' num2str(eMean)]);  % Вывод среднего значение
disp(['Относительная погрешность (в сравнении с значением первой выборки): ' num2str(abs(eMean - vMean)/eMean) '%'])
disp(['Исправленная дисперсия: ' num2str(eVar)]);  % Вывод исправленной дисперсии
disp(['Относительная погрешность (в сравнении с значением первой выборки): ' num2str(abs(eVar - vCorVar)/eVar) '%'])

clear ev;
clear eMean;
clear eVar;
clear evCorVar;

% 3 Расчет гистограммы относительных частот
% A) Найти минимальное xmin и максимальное xmax значение в выборке, разбить
% диапазон от минимального до максимального значения на определенное
% количество интервалов группировки r, которое можно расчитать по формуле
% Стерджесса

xmin = vMin;
xmax = vMax;
clear vMin;
clear vMax;
r = ceil(1 + 3.222 * log10(N));

% Б) Найти ширину каждого интервала группировки, как h = (xmax - xmin)/r.
% Всего таких интервалов будет r.

h = (xmax - xmin) / r;

% В) Получить массив границ z интервалов группировки, охватив всю область
% от максимального, до минимального значения в выборке. Всего таких границ
% будет r + 1

vSort = sort(v);  % сортируем выборку
z = zeros(1, r + 1);  % создаем массив с r + 1 элементами
for i = 1:r + 1  % Заполняем его границами
   z(i) = xmin + h * (i - 1); 
end

%  Г) Посчитать количество ui выборочных значений, попавших в каждый из
%  интервалов группировки

vCount = zeros(1, r);  % Делаем вектор с количеством элементов в каждой группе выборки
k = 1;  % Номер интервала
for i = vSort  % Проходим по каждому элементу
    while (k + 1 ~= r + 1 && i > z(k + 1))  % Корректирование номера интервала
       k = k + 1;
    end
    vCount(k) = vCount(k) + 1;  
end

%  Д) Построить гистограмму относительных частот, отложив по оси абсцисс
%  границы интервалов группировки zi, а по оси ординат значения ui/(h * n),
%  где n - объем выборки. Получится стобчатая фигура. Нанести на один и тот
%  же график плотность вероятности того теоретического распределения, из
%  которого генерируется выборки. Сравнить и сделать выводы.

centers = zeros(1, r);  % Вычисляем координаты центров
for i = 1:r
    centers(i) = xmin + h / 2 + h * (i - 1);
end

nvCount = zeros(1, r);

for i = 1:r  % Нормируем длины столбцов гистограммы
    nvCount(i) = vCount(i) / (h * N);
end

figure;  % Создаем новое окно
bar(centers, nvCount, 1);  % Отрисовываем столбцы гистограммы (1 - ширина столбца в процентах)
hold on;
x = xmin:0.1:xmax;
plot(x, gampdf(x, 2, 3), 'LineWidth', 1.5);  % Отрисовка функции распределения

% Вывод: Гистограмма в основном размещается под графиком функции
% распределения, практически повторяя ее форму.

% 4. Выполнить расчет выборочного среднего и выборочной дисперсии по
% группированным данным (использовать группированные данные, полученные при
% расчете гистограммы) и сравнить их со значениями выборочных
% характеристик, полученными в пункте 2 и сделать выводы.

mMean = 0;
mVar = 0;

for i = 1:r  % Расчет среднего значения группированной выборки
    mMean = mMean + (centers(i) * vCount(i)) / N;
end

for i = 1:r  % Расчет центрального момента 2-го порядка группированной выборки
    mVar = mVar + (centers(i)^2 * vCount(i)) / N;
end
mVar = mVar - mMean^2;  % Расчет дисперсии группированной выборки

disp(['Среднее значение: ' num2str(mMean)]);  % Вывод среднего значение
disp(['Относительная погрешность: ' num2str(abs(mMean - vMean)/vMean) '%'])
disp(['Исправленная дисперсия: ' num2str(mVar)]);  % Вывод исправленной дисперсии
disp(['Относительная погрешность: ' num2str(abs(mVar - vVar)/vVar) '%'])

% 5 Расчет эмпирической функции распределения
% Выполнить расчет эмпирической функции распределения для группированных
% данных (использовать результаты, полученные при расчете гистограммы) и
% негруппированных данных. Построить на одних осях две эти функции. Также,
% необходимо расчитать и построить вместе с этими эмпирическими функциями
% распределения график теоретической функции того распределения, из
% которого выборка генерировалась с задаными в условиях параметрами.
% Сравнить теоретическую функцию распределения и эмпирические функции по
% группированным и негруппированны данным. Сделать выводы.

empFunc = zeros(1, r + 1);  % Создаю массив с данными вероятностей эмпирической функции на груп. выборке
extra = 0;  % Вспомогательная сумма
for i = 1:r  % Проходимся по всем группам
   extra = extra + vCount(i);  % Наращиваем кол-во элементов в интервалах
   empFunc(i + 1) = extra / N;  % Делим для сокращения до < 1
end

noGrpFunc = zeros(1, N);  % Массив для негруппированной выборки
for i = 1:N
    noGrpFunc(i) = sum(vSort <= vSort(i)) / N;  % Значение эмпирической функции для каждого элемента выборки
end

z = [-1, 0, z]; % Вручную для красоты добавляем параметров по краям
empFunc = [0, 0, empFunc];

figure;
s = stairs(z, empFunc);
hold on;
p = plot(-1:0.1:40, gamcdf(-1:0.1:40, 2, 3), vSort, noGrpFunc);  % Отрисовываю функции
axis([z(1), z(r + 1), 0, 1]);  % Фиксирую окно
title('График эмпирических функций');
xlabel('x');
ylabel('F*(x)')
legend('Эмп. функция на груп. данных', 'Теоретическая функция', 'Эмп. Функция на негруп. данных');
p(1).LineWidth = 1.7;
s.LineWidth = 1.7;

% Вывод: Графики функций очень близки друг к другу и при увеличении
% количества элементов будут стремиться к полному совпадению.
